{"ast":null,"code":"var _jsxFileName = \"/Users/lax001/My Documents/Web Dev - Hyperion/Paired project/covid-19_heatmap/heatmap_frontend/src/context/AuthContext.js\",\n    _s = $RefreshSig$();\n\nimport { createContext, useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport jwt_decode from \"jwt-decode\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport default AuthContext;\nexport const AuthProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n\n  /* state */\n\n  /*authentication token*/\n  let [authToken, setAuthToken] = useState(() => localStorage.getItem(\"authToken\") ? JSON.parse(localStorage.getItem(\"authToken\")) : null);\n  /* gets the user name from the auth token*/\n\n  let [user, setUser] = useState(() => localStorage.getItem(\"authToken\") ? jwt_decode(localStorage.getItem(\"authToken\")) : null);\n  /* used to trigger a new token being generated*/\n\n  let [loading, setLoading] = useState(true);\n  const history = useNavigate();\n  /*function to login the user and get the auth token */\n\n  let loginUser = async e => {\n    e.preventDefault();\n    console.log(\">>> Login details submitted <<<\");\n    let response = await fetch(\"http://127.0.0.1:8000/api/token/\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        username: e.target.username.value,\n        password: e.target.password.value\n      })\n    });\n    let data = await response.json();\n    console.log(data);\n\n    if (response.status === 200) {\n      setAuthToken(data);\n      setUser(jwt_decode(data.access));\n      console.log(`>>>User ${user} is logged in <<<`);\n      localStorage.setItem(\"authToken\", JSON.stringify(data));\n    } else {\n      alert(\"could not authenticate user\");\n    }\n\n    console.log(authToken);\n  };\n  /* Register user */\n\n\n  let registerUser = async e => {\n    e.preventDefault();\n    console.log(\">>> Registration details submitted <<<\");\n    let response = await fetch(\"http://127.0.0.1:8000/api/users/register/\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        name: e.target.name.value,\n        email: e.target.email.value,\n        password: e.target.password.value\n      })\n    });\n    let data = await response.json();\n    console.log(data);\n\n    if (response.status === 200) {\n      setAuthToken(data);\n      setUser(jwt_decode(data.token));\n      console.log(`>>>User ${user} is logged in <<<`);\n      localStorage.setItem(\"authToken\", JSON.stringify(data));\n    } else {\n      alert(\"could not authenticate user\");\n    }\n\n    console.log(authToken);\n  }; //logout user\n\n\n  let logoutUser = () => {\n    setAuthToken(null);\n    setUser(null);\n    localStorage.removeItem(\"authToken\");\n    history(\"/\");\n  }; //gets new access token using the refresh token\n\n\n  let updateToken = async () => {\n    console.log(\">>> Updating Token <<<\", {\n      authToken\n    });\n    let response = await fetch(\"http://127.0.0.1:8000/api/token/refresh/\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        refresh: authToken === null || authToken === void 0 ? void 0 : authToken.refresh\n      })\n    });\n    let data = await response.json();\n    console.log(data);\n\n    if (response.status === 200) {\n      setAuthToken(data);\n      setUser(jwt_decode(data.access));\n      localStorage.setItem(\"authToken\", JSON.stringify(data));\n      history(\"/\"); // this replaces history.push('/)\n    } else {\n      logoutUser();\n    }\n\n    if (loading) {\n      setLoading(false);\n    }\n\n    console.log({\n      authToken\n    });\n  }; //populates contextData with state\n\n\n  let contextData = {\n    user: user,\n    authToken: authToken,\n    logoutUser: logoutUser,\n    loginUser: loginUser,\n    registerUser: registerUser\n  };\n  useEffect(() => {\n    if (loading) {\n      updateToken();\n    } // calls updateToken every 4 minutes\n\n\n    let fourMinutes = 1000 * 60 * 4;\n    let interval = setInterval(() => {\n      if (authToken) {\n        updateToken();\n      }\n    }, fourMinutes);\n    return () => clearInterval(interval); //clears interval so that an endless loop isn't created\n  }, [authToken, loading]);\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: contextData,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 155,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AuthProvider, \"rWxwl4kqG8KlRKuA74rA3XOsyy8=\", false, function () {\n  return [useNavigate];\n});\n\n_c = AuthProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"sources":["/Users/lax001/My Documents/Web Dev - Hyperion/Paired project/covid-19_heatmap/heatmap_frontend/src/context/AuthContext.js"],"names":["createContext","useState","useEffect","useNavigate","jwt_decode","React","AuthContext","AuthProvider","children","authToken","setAuthToken","localStorage","getItem","JSON","parse","user","setUser","loading","setLoading","history","loginUser","e","preventDefault","console","log","response","fetch","method","headers","body","stringify","username","target","value","password","data","json","status","access","setItem","alert","registerUser","name","email","token","logoutUser","removeItem","updateToken","refresh","contextData","fourMinutes","interval","setInterval","clearInterval"],"mappings":"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","sourcesContent":["import { createContext, useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport jwt_decode from \"jwt-decode\";\n\nimport React from \"react\";\n\nconst AuthContext = createContext();\n\nexport default AuthContext;\n\nexport const AuthProvider = ({ children }) => {\n  /* state */\n\n  /*authentication token*/\n  let [authToken, setAuthToken] = useState(() =>\n    localStorage.getItem(\"authToken\")\n      ? JSON.parse(localStorage.getItem(\"authToken\"))\n      : null\n  );\n\n  /* gets the user name from the auth token*/\n  let [user, setUser] = useState(() =>\n    localStorage.getItem(\"authToken\")\n      ? jwt_decode(localStorage.getItem(\"authToken\"))\n      : null\n  );\n\n  /* used to trigger a new token being generated*/\n  let [loading, setLoading] = useState(true);\n\n  const history = useNavigate();\n\n  /*function to login the user and get the auth token */\n\n  let loginUser = async (e) => {\n    e.preventDefault();\n\n    console.log(\">>> Login details submitted <<<\");\n\n    let response = await fetch(\"http://127.0.0.1:8000/api/token/\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        username: e.target.username.value,\n        password: e.target.password.value,\n      }),\n    });\n    let data = await response.json();\n    console.log(data);\n    if (response.status === 200) {\n      setAuthToken(data);\n      setUser(jwt_decode(data.access));\n      console.log(`>>>User ${user} is logged in <<<`);\n      localStorage.setItem(\"authToken\", JSON.stringify(data));\n    } else {\n      alert(\"could not authenticate user\");\n    }\n    console.log(authToken);\n  };\n\n  /* Register user */\n\n  let registerUser = async (e) => {\n    e.preventDefault();\n\n    console.log(\">>> Registration details submitted <<<\");\n\n    let response = await fetch(\"http://127.0.0.1:8000/api/users/register/\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        name: e.target.name.value,\n        email: e.target.email.value,\n        password: e.target.password.value,\n      }),\n    });\n    let data = await response.json();\n    console.log(data);\n    if (response.status === 200) {\n      setAuthToken(data);\n      setUser(jwt_decode(data.token));\n      console.log(`>>>User ${user} is logged in <<<`);\n      localStorage.setItem(\"authToken\", JSON.stringify(data));\n    } else {\n      alert(\"could not authenticate user\");\n    }\n    console.log(authToken);\n  };\n\n  //logout user\n  let logoutUser = () => {\n    setAuthToken(null);\n    setUser(null);\n    localStorage.removeItem(\"authToken\");\n    history(\"/\");\n  };\n\n  //gets new access token using the refresh token\n  let updateToken = async () => {\n    console.log(\">>> Updating Token <<<\", { authToken });\n    let response = await fetch(\"http://127.0.0.1:8000/api/token/refresh/\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        refresh: authToken?.refresh,\n      }),\n    });\n    let data = await response.json();\n    console.log(data);\n    if (response.status === 200) {\n      setAuthToken(data);\n      setUser(jwt_decode(data.access));\n      localStorage.setItem(\"authToken\", JSON.stringify(data));\n      history(\"/\"); // this replaces history.push('/)\n    } else {\n      logoutUser();\n    }\n    if (loading) {\n      setLoading(false);\n    }\n    console.log({ authToken });\n  };\n\n  //populates contextData with state\n  let contextData = {\n    user: user,\n    authToken: authToken,\n    logoutUser: logoutUser,\n    loginUser: loginUser,\n    registerUser: registerUser,\n  };\n\n  useEffect(() => {\n    if (loading) {\n      updateToken();\n    }\n    // calls updateToken every 4 minutes\n    let fourMinutes = 1000 * 60 * 4;\n    let interval = setInterval(() => {\n      if (authToken) {\n        updateToken();\n      }\n    }, fourMinutes);\n\n    return () => clearInterval(interval); //clears interval so that an endless loop isn't created\n  }, [authToken, loading]);\n\n  return (\n    <AuthContext.Provider value={contextData}>{children}</AuthContext.Provider>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}